/*
Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/

#ifndef enum_reflect_vs_2013_hpp_included
#define enum_reflect_vs_2013_hpp_included

#include <cstring>
#include <exception>

namespace enum_reflect
{
  namespace detail
  {
    template<bool B, class T = int>
    struct enable_if {};

    template<class T>
    struct enable_if<true, T> { typedef T type; };

    static size_t substring_size(char const* str, char start_char, size_t start_offset)
    {
      char const* start = strchr(str, start_char) + start_offset + 1; // 1 for next pos
      char const* end = strchr(str, '>');

      return end - start;
    }
  }

  template<typename T, T>
  bool value_exists()
  {
    char c = *(strchr(__FUNCSIG__, ',') + 1);

    return (c >= 65 && c <= 90) || (c >= 97 && c <= 122);
  }

  template<typename T>
  size_t name_size()
  {
    return detail::substring_size(__FUNCSIG__, '<', 5); // 4 for enum + 1 for space
  }

  template<typename T>
  const char* name()
  {
    return strchr(__FUNCSIG__, '<') + 6; // 1 for next pos + 4 for enum + 1 for space
  }

  template<typename T, T>
  size_t value_size()
  {
    return detail::substring_size(__FUNCSIG__, ',', 0);
  }

  template<typename T, T>
  const char* value()
  {
    return strchr(__FUNCSIG__, ',') + 1; // 1 for next pos 
  }

  template<typename T, size_t Max = 100, size_t Index = 0, typename detail::enable_if<(Index <= Max)>::type = true>
  T from_string(char const* str, T default_value)
  {
    if (value_exists<T, static_cast<T>(Index)>())
    {
      if (strncmp(value<T, static_cast<T>(Index)>(), str, value_size<T, static_cast<T>(Index)>()) == 0)
        return static_cast<T>(Index);
      return from_string<T, Max, Index + 1>(str, default_value);
    }
    return default_value;
  }

  template<typename T, size_t Max = 100, size_t Index = 0, typename detail::enable_if<(Index > Max)>::type = true>
  T from_string(char const* str, T default_value)
  {
    if (value_exists<T, static_cast<T>(Index)>())
      std::terminate();
  }

  template<typename T, typename Container, size_t Max = 100, size_t Index = 0, typename detail::enable_if<(Index <= Max)>::type = true>
  void stringify(Container& items)
  {
    if (value_exists<T, static_cast<T>(Index)>())
    {
      items.push_back(typename Container::value_type{ value<T, static_cast<T>(Index)>(), value_size<T, static_cast<T>(Index)>() });

      stringify<T, Container, Max, Index + 1>(items);
    }
  }

  template<typename T, typename Container, size_t Max = 100, size_t Index = 0, typename detail::enable_if<(Index > Max)>::type = true>
  void stringify(Container& items)
  {
    if (value_exists<T, static_cast<T>(Index)>())
      std::terminate();
  }
}

#endif // enum_reflect_vs_2013_hpp_included